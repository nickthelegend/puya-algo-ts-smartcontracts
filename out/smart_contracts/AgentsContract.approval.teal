#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 3 6
    bytecblock "number"
    // smart_contracts/Agents.algo.ts:27
    // export class AgentsContract extends Contract {
    txn NumAppArgs
    bz main_after_if_else@9
    pushbytess 0xda53fefe 0xaecaffd1 0xc29e6196 // method "createApplication(account)void", method "createAgent(string,string,uint64,string)void", method "deleteAgent(uint64)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_createAgent_route@4 main_deleteAgent_route@5

main_after_if_else@9:
    // smart_contracts/Agents.algo.ts:27
    // export class AgentsContract extends Contract {
    intc_0 // 0
    return

main_deleteAgent_route@5:
    // smart_contracts/Agents.algo.ts:89
    // deleteAgent(agentId: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/Agents.algo.ts:27
    // export class AgentsContract extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/Agents.algo.ts:89
    // deleteAgent(agentId: uint64): void {
    callsub deleteAgent
    intc_1 // 1
    return

main_createAgent_route@4:
    // smart_contracts/Agents.algo.ts:46
    // createAgent(agentName: Str, agentIPFS: Str, pricing: arc4.UintN64, agentImage: Str): void{
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/Agents.algo.ts:27
    // export class AgentsContract extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/Agents.algo.ts:46
    // createAgent(agentName: Str, agentIPFS: Str, pricing: arc4.UintN64, agentImage: Str): void{
    callsub createAgent
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/Agents.algo.ts:39
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/Agents.algo.ts:27
    // export class AgentsContract extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/Agents.algo.ts:39
    // @abimethod()
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/Agents.algo.ts::AgentsContract.createApplication(maintainerAddress: bytes) -> void:
createApplication:
    // smart_contracts/Agents.algo.ts:39-40
    // @abimethod()
    // createApplication(maintainerAddress: Account): void {
    proto 1 0
    // smart_contracts/Agents.algo.ts:29
    // maintainerAddress =  GlobalState<Account>();
    pushbytes "maintainerAddress"
    // smart_contracts/Agents.algo.ts:42
    // this.maintainerAddress.value = maintainerAddress;
    frame_dig -1
    app_global_put
    // smart_contracts/Agents.algo.ts:30
    // number = GlobalState<uint64>();
    bytec_0 // "number"
    // smart_contracts/Agents.algo.ts:43
    // this.number.value = 0;
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/Agents.algo.ts::AgentsContract.createAgent(agentName: bytes, agentIPFS: bytes, pricing: bytes, agentImage: bytes) -> void:
createAgent:
    // smart_contracts/Agents.algo.ts:46
    // createAgent(agentName: Str, agentIPFS: Str, pricing: arc4.UintN64, agentImage: Str): void{
    proto 4 0
    // smart_contracts/Agents.algo.ts:49-56
    //           const itxnResult = itxn
    // .assetConfig({
    //   total: 100_000_000_000,
    //   decimals: 2,
    //   unitName: 'RP',
    //   assetName: 'Royalty Points',
    // })
    // .submit()
    itxn_begin
    // smart_contracts/Agents.algo.ts:54
    // assetName: 'Royalty Points',
    pushbytes "Royalty Points"
    itxn_field ConfigAssetName
    // smart_contracts/Agents.algo.ts:53
    // unitName: 'RP',
    pushbytes "RP"
    itxn_field ConfigAssetUnitName
    // smart_contracts/Agents.algo.ts:52
    // decimals: 2,
    pushint 2 // 2
    itxn_field ConfigAssetDecimals
    // smart_contracts/Agents.algo.ts:51
    // total: 100_000_000_000,
    pushint 100000000000 // 100000000000
    itxn_field ConfigAssetTotal
    // smart_contracts/Agents.algo.ts:49-55
    //           const itxnResult = itxn
    // .assetConfig({
    //   total: 100_000_000_000,
    //   decimals: 2,
    //   unitName: 'RP',
    //   assetName: 'Royalty Points',
    // })
    intc_2 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/Agents.algo.ts:49-56
    //           const itxnResult = itxn
    // .assetConfig({
    //   total: 100_000_000_000,
    //   decimals: 2,
    //   unitName: 'RP',
    //   assetName: 'Royalty Points',
    // })
    // .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/Agents.algo.ts:63
    // createdAt: new arc4.UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/Agents.algo.ts:64
    // assetID: new arc4.UintN64(assetID) ,creatorName: agentImage
    swap
    itob
    // smart_contracts/Agents.algo.ts:59-65
    // this.agentMap(this.number.value).value = new Agent({
    //   name: agentName,
    //   details: agentIPFS,
    //   fixedPricing: pricing,
    //   createdAt: new arc4.UintN64(Global.latestTimestamp),
    //    assetID: new arc4.UintN64(assetID) ,creatorName: agentImage
    // });
    frame_dig -4
    len
    pushint 30 // 30
    +
    dup
    itob
    extract 6 2
    pushbytes 0x001e
    swap
    concat
    frame_dig -3
    len
    uncover 2
    +
    swap
    frame_dig -2
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    itob
    extract 6 2
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -1
    concat
    // smart_contracts/Agents.algo.ts:30
    // number = GlobalState<uint64>();
    intc_0 // 0
    bytec_0 // "number"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/Agents.algo.ts:59
    // this.agentMap(this.number.value).value = new Agent({
    itob
    // smart_contracts/Agents.algo.ts:59-65
    // this.agentMap(this.number.value).value = new Agent({
    //   name: agentName,
    //   details: agentIPFS,
    //   fixedPricing: pricing,
    //   createdAt: new arc4.UintN64(Global.latestTimestamp),
    //    assetID: new arc4.UintN64(assetID) ,creatorName: agentImage
    // });
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/Agents.algo.ts:30
    // number = GlobalState<uint64>();
    intc_0 // 0
    bytec_0 // "number"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/Agents.algo.ts:66
    // this.number.value +=1;
    intc_1 // 1
    +
    // smart_contracts/Agents.algo.ts:30
    // number = GlobalState<uint64>();
    bytec_0 // "number"
    // smart_contracts/Agents.algo.ts:66
    // this.number.value +=1;
    swap
    app_global_put
    // smart_contracts/Agents.algo.ts:71-81
    // const helloApp = itxn
    //   .applicationCall({
    //     appArgs: [methodSelector(SingleAgentContract.prototype.createApplication),agentName,agentIPFS, pricing ],
    //     approvalProgram: compiled.approvalProgram,
    //     clearStateProgram: compiled.clearStateProgram,
    //     globalNumBytes: compiled.globalBytes,
    //         //   accounts: [ userAddress ],
    //            globalNumUint: 6, // <-- Allow 1 uint in global state,
    // 
    //   })
    //   .submit().createdApp
    itxn_begin
    // smart_contracts/Agents.algo.ts:78
    // globalNumUint: 6, // <-- Allow 1 uint in global state,
    intc_3 // 6
    itxn_field GlobalNumUint
    // smart_contracts/Agents.algo.ts:68
    // const compiled = compile(SingleAgentContract)
    intc_2 // 3
    itxn_field GlobalNumByteSlice
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAAEmBQxvd25lckFkZHJlc3MJdGFza0NvdW50DGZpeGVkUHJpY2luZwEAAgAzMRtBACqCBQTAS3X0BGtoAxgExUY+6gTuM5EvBPO6onA2GgCOBQBiAEwAKgAUAAIiQzEZFEQxGEQ2GgEXwByIAb0jQzEZFEQxGEQ2GgEXwBw2GgIXiAFTI0MxGRREMRhENhoBFzYaAjYaAzYaBDYaBTYaBjYaB4gAxiNDMRkURDEYRDEWIwlJOBAjEkSIAFEjQzEZFEQxGBRENhoBVwIANhoCVwIANhoDF4gAAiNDigMAKDEAZ4AEbmFtZYv9Z4AHZGV0YWlsc4v+ZyqL/2eACWNyZWF0ZWRBdDIHZykiZ4mKAQAiKmVEgcCEPQuL/zgHMgoSRIv/OAgSRCIpZURJFjIHFov/OABLAitQTwJQJwRQTFCAHgAcUGF5bWVudCBEb25lISEsIFRhc2sgQ3JlYXRlZFBLAbxIvyMIKUxniYoHACJJi/kWSb5EMgcWi/oiU0EAR4v9jACL+yJTQQAti/6MAYv8IlNBABqL/4sCSYsAUIsEUCcEUE8CUIsBUEsBvEi/iYsDVxMgQv/giwNJgRFZSwEVUowBQv/IiwOBQFMrIk8CVIwAQv+uigIAMQAiKGVEEkSxi/6yB4v/sggjshAisgGzsTIIFoAExsRQFLIagAoACHdpdGhkcmF3shqyGoAIAAZzdWNlc3OyGoGC883kArIYgQayECKyAbOJigEAMQAiKGVEEkQoi/9niQ==)
    itxn_field ApprovalProgramPages
    // smart_contracts/Agents.algo.ts:73
    // appArgs: [methodSelector(SingleAgentContract.prototype.createApplication),agentName,agentIPFS, pricing ],
    pushbytes 0xc04b75f4 // method "createApplication(string,string,uint64)void"
    itxn_field ApplicationArgs
    frame_dig -4
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    // smart_contracts/Agents.algo.ts:71-80
    // const helloApp = itxn
    //   .applicationCall({
    //     appArgs: [methodSelector(SingleAgentContract.prototype.createApplication),agentName,agentIPFS, pricing ],
    //     approvalProgram: compiled.approvalProgram,
    //     clearStateProgram: compiled.clearStateProgram,
    //     globalNumBytes: compiled.globalBytes,
    //         //   accounts: [ userAddress ],
    //            globalNumUint: 6, // <-- Allow 1 uint in global state,
    // 
    //   })
    intc_3 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/Agents.algo.ts:71-81
    // const helloApp = itxn
    //   .applicationCall({
    //     appArgs: [methodSelector(SingleAgentContract.prototype.createApplication),agentName,agentIPFS, pricing ],
    //     approvalProgram: compiled.approvalProgram,
    //     clearStateProgram: compiled.clearStateProgram,
    //     globalNumBytes: compiled.globalBytes,
    //         //   accounts: [ userAddress ],
    //            globalNumUint: 6, // <-- Allow 1 uint in global state,
    // 
    //   })
    //   .submit().createdApp
    itxn_submit
    retsub


// smart_contracts/Agents.algo.ts::AgentsContract.deleteAgent(agentId: uint64) -> void:
deleteAgent:
    // smart_contracts/Agents.algo.ts:89
    // deleteAgent(agentId: uint64): void {
    proto 1 0
    // smart_contracts/Agents.algo.ts:90
    // assert(Txn.sender === Txn.applicationId.creator, 'Only the maintainer can delete agents');
    txn Sender
    txn ApplicationID
    app_params_get AppCreator
    assert // application exists
    ==
    assert // Only the maintainer can delete agents
    // smart_contracts/Agents.algo.ts:91
    // assert(this.agentMap(agentId).exists, 'Agent does not exist');
    frame_dig -1
    itob
    dup
    box_len
    bury 1
    assert // Agent does not exist
    // smart_contracts/Agents.algo.ts:96
    // this.agentMap(agentId).delete();
    box_del
    pop
    // smart_contracts/Agents.algo.ts:30
    // number = GlobalState<uint64>();
    intc_0 // 0
    bytec_0 // "number"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/Agents.algo.ts:97
    // this.number.value -= 1;
    intc_1 // 1
    -
    // smart_contracts/Agents.algo.ts:30
    // number = GlobalState<uint64>();
    bytec_0 // "number"
    // smart_contracts/Agents.algo.ts:97
    // this.number.value -= 1;
    swap
    app_global_put
    retsub
