{
  "version": 3,
  "sources": [
    "/workspaces/puya-algo-ts-smartcontracts/smart_contracts/MainSmartContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;AA2BA;;AAAA;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAuBE;;AAAA;AAAA;AAAA;;AAAA;AAvBF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBE;;;AAAA;;AATC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAXD;;;;;;;;;;;;;;;;;;;AAcqC;;AAAnC;AAXF;;;;;;;;;;;;;;AAY4B;AAA1B;;AAKF;;;AAEgB;;AAAA;;AAAoB;;AAA3B;AAAP;AACc;;AAAA;;AAAkB;;;AAAzB;AAAP;AAQa;AAMS;;AACA;;;;;;AAVT;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKH;;;AAAgE;;;;;;;;;;;;AAF7D;;;;AAAA;;;AAAA;AAYE;;AAFP;;AAER;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0xb8447b36"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_after_if_else@8",
      "stack_out": []
    },
    "17": {
      "op": "bytec_0 // method \"createApplication()void\"",
      "defined_out": [
        "Method(createApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)"
      ]
    },
    "18": {
      "op": "pushbytes 0xf040dd0d // method \"register(pay)void\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(register(pay)void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(register(pay)void)"
      ]
    },
    "24": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(register(pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(register(pay)void)",
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "match main_createApplication_route@3 main_register_route@4",
      "stack_out": []
    },
    "33": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "34": {
      "op": "return",
      "stack_out": []
    },
    "35": {
      "block": "main_register_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "37": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "38": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "41": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "42": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "44": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "1"
      ]
    },
    "45": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "46": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "47": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "49": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "50": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "51": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "52": {
      "callsub": "smart_contracts/MainSmartContract.algo.ts::MainSmartContract.register",
      "op": "callsub register",
      "stack_out": []
    },
    "55": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "return",
      "stack_out": []
    },
    "57": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "60": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "63": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "64": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "65": {
      "callsub": "smart_contracts/MainSmartContract.algo.ts::MainSmartContract.createApplication",
      "op": "callsub createApplication"
    },
    "68": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "69": {
      "op": "return",
      "stack_out": []
    },
    "70": {
      "subroutine": "smart_contracts/MainSmartContract.algo.ts::MainSmartContract.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "pushbytes \"maintainerAddress\"",
      "defined_out": [
        "\"maintainerAddress\""
      ],
      "stack_out": [
        "\"maintainerAddress\""
      ]
    },
    "89": {
      "op": "txn Sender",
      "defined_out": [
        "\"maintainerAddress\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"maintainerAddress\"",
        "new_state_value%0#0"
      ]
    },
    "91": {
      "op": "app_global_put",
      "stack_out": []
    },
    "92": {
      "op": "pushbytes \"users_number\"",
      "defined_out": [
        "\"users_number\""
      ],
      "stack_out": [
        "\"users_number\""
      ]
    },
    "106": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"users_number\"",
        "0"
      ],
      "stack_out": [
        "\"users_number\"",
        "0"
      ]
    },
    "107": {
      "op": "app_global_put",
      "stack_out": []
    },
    "108": {
      "retsub": true,
      "op": "retsub"
    },
    "109": {
      "subroutine": "smart_contracts/MainSmartContract.algo.ts::MainSmartContract.register",
      "params": {
        "payTxn#0": "uint64"
      },
      "block": "register",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "112": {
      "op": "frame_dig -1",
      "defined_out": [
        "payTxn#0 (copy)"
      ],
      "stack_out": [
        "payTxn#0 (copy)"
      ]
    },
    "114": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "119": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "120": {
      "op": "frame_dig -1",
      "stack_out": [
        "payTxn#0 (copy)"
      ]
    },
    "122": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "124": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "5000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "5000"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "128": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": []
    },
    "129": {
      "op": "itxn_begin"
    },
    "130": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "132": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "2"
      ]
    },
    "134": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "136": {
      "op": "itxn_field Accounts",
      "stack_out": []
    },
    "138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": []
    },
    "141": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw=="
      ],
      "stack_out": [
        "CoEBQw=="
      ]
    },
    "147": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": []
    },
    "149": {
      "op": "pushbytes base64(CjEbQQAVggIEuER7NgSD1TxpNhoAjgIAHAADgQBDMRkURDEYRDYaATYaAjYaAxfAHIgALYEBQzEZFEQxGBREiAADgQFDgAxvd25lckFkZHJlc3MxAGeABWxpbWl0gQpniYoDAIv9FYEFCBZXBgKAAwAFgExQi/1Qi/5Qi/+8SIv/TL+J)",
      "defined_out": [
        "CjEbQQAVggIEuER7NgSD1TxpNhoAjgIAHAADgQBDMRkURDEYRDYaATYaAjYaAxfAHIgALYEBQzEZFEQxGBREiAADgQFDgAxvd25lckFkZHJlc3MxAGeABWxpbWl0gQpniYoDAIv9FYEFCBZXBgKAAwAFgExQi/1Qi/5Qi/+8SIv/TL+J"
      ],
      "stack_out": [
        "CjEbQQAVggIEuER7NgSD1TxpNhoAjgIAHAADgQBDMRkURDEYRDYaATYaAjYaAxfAHIgALYEBQzEZFEQxGBREiAADgQFDgAxvd25lckFkZHJlc3MxAGeABWxpbWl0gQpniYoDAIv9FYEFCBZXBgKAAwAFgExQi/1Qi/5Qi/+8SIv/TL+J"
      ]
    },
    "284": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": []
    },
    "286": {
      "op": "bytec_0 // method \"createApplication()void\"",
      "defined_out": [
        "Method(createApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)"
      ]
    },
    "287": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "289": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "299": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "301": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "303": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "305": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "306": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "308": {
      "op": "itxn_submit"
    },
    "309": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "311": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "helloApp#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "helloApp#0"
      ]
    },
    "313": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "new_box_value%0#0"
      ]
    },
    "314": {
      "op": "box_put",
      "stack_out": []
    },
    "315": {
      "retsub": true,
      "op": "retsub"
    }
  }
}