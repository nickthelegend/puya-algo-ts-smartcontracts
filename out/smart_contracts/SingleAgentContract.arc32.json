{
    "hints": {
        "createApplication(string,string,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "pay(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateTask(uint64,bool,bool,bool,bool,string,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferOwnership(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "createdAt": {
                    "type": "uint64",
                    "key": "createdAt"
                },
                "details": {
                    "type": "bytes",
                    "key": "details"
                },
                "fixedPricing": {
                    "type": "uint64",
                    "key": "fixedPricing"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                },
                "ownerAddress": {
                    "type": "bytes",
                    "key": "ownerAddress"
                },
                "taskCount": {
                    "type": "uint64",
                    "key": "taskCount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SingleAgentContract",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "string",
                        "name": "agentName"
                    },
                    {
                        "type": "string",
                        "name": "agentDetails"
                    },
                    {
                        "type": "uint64",
                        "name": "pricing"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "pay",
                "args": [
                    {
                        "type": "pay",
                        "name": "payTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateTask",
                "args": [
                    {
                        "type": "uint64",
                        "name": "idx"
                    },
                    {
                        "type": "bool",
                        "name": "updateSuccess"
                    },
                    {
                        "type": "bool",
                        "name": "updateDetails"
                    },
                    {
                        "type": "bool",
                        "name": "updateExecutor"
                    },
                    {
                        "type": "bool",
                        "name": "success"
                    },
                    {
                        "type": "string",
                        "name": "details"
                    },
                    {
                        "type": "address",
                        "name": "executor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "account",
                        "name": "to"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transferOwnership",
                "args": [
                    {
                        "type": "account",
                        "name": "newOwner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}