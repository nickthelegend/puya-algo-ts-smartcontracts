{
    "name": "SingleAgentContract",
    "structs": {
        "Task": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "success",
                "type": "bool"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            },
            {
                "name": "details",
                "type": "string"
            },
            {
                "name": "executor",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "string",
                    "name": "agentName"
                },
                {
                    "type": "string",
                    "name": "agentDetails"
                },
                {
                    "type": "uint64",
                    "name": "pricing"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pay",
            "args": [
                {
                    "type": "pay",
                    "name": "payTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateTask",
            "args": [
                {
                    "type": "uint64",
                    "name": "idx"
                },
                {
                    "type": "bool",
                    "name": "updateSuccess"
                },
                {
                    "type": "bool",
                    "name": "updateDetails"
                },
                {
                    "type": "bool",
                    "name": "updateExecutor"
                },
                {
                    "type": "bool",
                    "name": "success"
                },
                {
                    "type": "string",
                    "name": "details"
                },
                {
                    "type": "address",
                    "name": "executor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "account",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferOwnership",
            "args": [
                {
                    "type": "account",
                    "name": "newOwner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                },
                "details": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "ZGV0YWlscw=="
                },
                "fixedPricing": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Zml4ZWRQcmljaW5n"
                },
                "createdAt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRlZEF0"
                },
                "ownerAddress": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3duZXJBZGRyZXNz"
                },
                "taskCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGFza0NvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "taskBox": {
                    "keyType": "uint64",
                    "valueType": "Task",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        377
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        297
                    ],
                    "errorMessage": "Incorrect payment amount"
                },
                {
                    "pc": [
                        438
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        100,
                        118,
                        140,
                        174,
                        196
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        200
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        103,
                        121,
                        143,
                        177
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        278,
                        301,
                        482,
                        566
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        484,
                        568
                    ],
                    "errorMessage": "only owner"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "payment must be to app"
                },
                {
                    "pc": [
                        187
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBQxvd25lckFkZHJlc3MJdGFza0NvdW50DGZpeGVkUHJpY2luZwEAAgAzMRtBACqCBQTAS3X0BGtoAxgExUY+6gTuM5EvBPO6onA2GgCOBQBiAEwAKgAUAAIiQzEZFEQxGEQ2GgEXwByIAb0jQzEZFEQxGEQ2GgEXwBw2GgIXiAFTI0MxGRREMRhENhoBFzYaAjYaAzYaBDYaBTYaBjYaB4gAxiNDMRkURDEYRDEWIwlJOBAjEkSIAFEjQzEZFEQxGBRENhoBVwIANhoCVwIANhoDF4gAAiNDigMAKDEAZ4AEbmFtZYv9Z4AHZGV0YWlsc4v+ZyqL/2eACWNyZWF0ZWRBdDIHZykiZ4mKAQAiKmVEgcCEPQuL/zgHMgoSRIv/OAgSRCIpZURJFjIHFov/OABLAitQTwJQJwRQTFCAHgAcUGF5bWVudCBEb25lISEsIFRhc2sgQ3JlYXRlZFBLAbxIvyMIKUxniYoHACJJi/kWSb5EMgcWi/oiU0EAR4v9jACL+yJTQQAti/6MAYv8IlNBABqL/4sCSYsAUIsEUCcEUE8CUIsBUEsBvEi/iYsDVxMgQv/giwNJgRFZSwEVUowBQv/IiwOBQFMrIk8CVIwAQv+uigIAMQAiKGVEEkSxi/6yB4v/sggjshAisgGzsTIIFoAExsRQFLIagAoACHdpdGhkcmF3shqyGoAIAAZzdWNlc3OyGoGC883kArIYgQayECKyAbOJigEAMQAiKGVEEkQoi/9niQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}