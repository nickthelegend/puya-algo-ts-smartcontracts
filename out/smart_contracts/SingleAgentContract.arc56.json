{
    "name": "SingleAgentContract",
    "structs": {
        "Task": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "success",
                "type": "bool"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            },
            {
                "name": "details",
                "type": "string"
            },
            {
                "name": "executor",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "string",
                    "name": "agentName"
                },
                {
                    "type": "string",
                    "name": "agentDetails"
                },
                {
                    "type": "uint64",
                    "name": "pricing"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pay",
            "args": [
                {
                    "type": "pay",
                    "name": "payTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateTask",
            "args": [
                {
                    "type": "uint64",
                    "name": "idx"
                },
                {
                    "type": "bool",
                    "name": "updateSuccess"
                },
                {
                    "type": "bool",
                    "name": "updateDetails"
                },
                {
                    "type": "bool",
                    "name": "updateExecutor"
                },
                {
                    "type": "bool",
                    "name": "success"
                },
                {
                    "type": "string",
                    "name": "details"
                },
                {
                    "type": "address",
                    "name": "executor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                },
                "details": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "ZGV0YWlscw=="
                },
                "fixedPricing": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Zml4ZWRQcmljaW5n"
                },
                "createdAt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRlZEF0"
                },
                "ownerAddress": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3duZXJBZGRyZXNz"
                },
                "taskCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGFza0NvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "taskBox": {
                    "keyType": "uint64",
                    "valueType": "Task",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        349
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "Incorrect payment amount"
                },
                {
                    "pc": [
                        410
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        93,
                        112,
                        146,
                        168
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        172
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        96,
                        115,
                        149
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        250,
                        273,
                        454
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        456
                    ],
                    "errorMessage": "only owner"
                },
                {
                    "pc": [
                        263
                    ],
                    "errorMessage": "payment must be to app"
                },
                {
                    "pc": [
                        159
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBQl0YXNrQ291bnQMb3duZXJBZGRyZXNzDGZpeGVkUHJpY2luZwEAAgAzMRtBACOCBATAS3X0BGtoAxgExUY+6gQT/xzpNhoAjgQATQA3ABUAAiJDMRkURDEYRDYaATYaAheIAVMjQzEZFEQxGEQ2GgEXNhoCNhoDNhoENhoFNhoGNhoHiADGI0MxGRREMRhEMRYjCUk4ECMSRIgAUSNDMRkURDEYFEQ2GgFXAgA2GgJXAgA2GgMXiAACI0OKAwApMQBngARuYW1li/1ngAdkZXRhaWxzi/5nKov/Z4AJY3JlYXRlZEF0MgdnKCJniYoBACIqZUSBwIQ9C4v/OAcyChJEi/84CBJEIihlREkWMgcWi/84AEsCK1BPAlAnBFBMUIAeABxQYXltZW50IERvbmUhISwgVGFzayBDcmVhdGVkUEsBvEi/IwgoTGeJigcAIkmL+RZJvkQyBxaL+iJTQQBHi/2MAIv7IlNBAC2L/owBi/wiU0EAGov/iwJJiwBQiwRQJwRQTwJQiwFQSwG8SL+JiwNXEyBC/+CLA0mBEVlLARVSjAFC/8iLA4FAUysiTwJUjABC/66KAgAxACIpZUQSRLExALIHi/+yCCOyECKyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}