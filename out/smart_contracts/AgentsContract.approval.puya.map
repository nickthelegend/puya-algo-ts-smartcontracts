{
  "version": 3,
  "sources": [
    "/workspaces/puya-algo-ts-smartcontracts/smart_contracts/Agents.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AA0BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA8DA;;AAAA;AAAA;AAAA;;AAAA;AA9DA;;;AAAA;AA8DA;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AAnBA;;;AAAA;;;AAAA;;;AAAA;;;AAmBA;;;AAAA;;AAPG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAZH;;;AAAA;AAAA;;AAYG;;;AAAA;;AAAD;;;AAVE;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;AAZA;AAawB;AAApB;;AAGR;;;AAGmC;AAKhB;;;;;;;;;;;;;;;;;;AADD;;;;;;AADA;;;;AADH;;;;;;;;;AAFoB;;;AAAA;;;AAAA;;;AAcgB;;AAAxB;AACD;AAAA;AAL6B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA7BnD;AAAA;AAAA;AAAA;AA6BU;AAAA;AAAA;;AAAA;AAAA;AA7BV;AAAA;AAAA;AAAA;AAoC8B;AAApB;AApCV;AAokBjB;;;AACW;;AAAe;;AAAc;;AAAA;AAAjC;AAAP;AACW;;AAAA;AAAuB;AAAA;AAAA;;AAA9B;AAKuB;;AAlEvB;AAAA;AAAA;AAAA;AAmEqB;AAArB;AAnEA;AAmEA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"number\""
    },
    "16": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bz main_after_if_else@9",
      "stack_out": []
    },
    "21": {
      "op": "pushbytess 0xda53fefe 0xaecaffd1 0xc29e6196 // method \"createApplication(account)void\", method \"createAgent(string,string,uint64,string)void\", method \"deleteAgent(uint64)void\"",
      "defined_out": [
        "Method(createAgent(string,string,uint64,string)void)",
        "Method(createApplication(account)void)",
        "Method(deleteAgent(uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account)void)",
        "Method(createAgent(string,string,uint64,string)void)",
        "Method(deleteAgent(uint64)void)"
      ]
    },
    "38": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createAgent(string,string,uint64,string)void)",
        "Method(createApplication(account)void)",
        "Method(deleteAgent(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account)void)",
        "Method(createAgent(string,string,uint64,string)void)",
        "Method(deleteAgent(uint64)void)",
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "match main_createApplication_route@3 main_createAgent_route@4 main_deleteAgent_route@5",
      "stack_out": []
    },
    "49": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "return",
      "stack_out": []
    },
    "51": {
      "block": "main_deleteAgent_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "57": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "58": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "61": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "62": {
      "callsub": "smart_contracts/Agents.algo.ts::AgentsContract.deleteAgent",
      "op": "callsub deleteAgent",
      "stack_out": []
    },
    "65": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "return",
      "stack_out": []
    },
    "67": {
      "block": "main_createAgent_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "69": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "70": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "71": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "73": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "74": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "77": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "80": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0"
      ]
    },
    "86": {
      "callsub": "smart_contracts/Agents.algo.ts::AgentsContract.createAgent",
      "op": "callsub createAgent",
      "stack_out": []
    },
    "89": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "98": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "99": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "102": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "103": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "105": {
      "callsub": "smart_contracts/Agents.algo.ts::AgentsContract.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "108": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "return",
      "stack_out": []
    },
    "110": {
      "subroutine": "smart_contracts/Agents.algo.ts::AgentsContract.createApplication",
      "params": {
        "maintainerAddress#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "113": {
      "op": "pushbytes \"maintainerAddress\"",
      "defined_out": [
        "\"maintainerAddress\""
      ],
      "stack_out": [
        "\"maintainerAddress\""
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"maintainerAddress\"",
        "maintainerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"maintainerAddress\"",
        "maintainerAddress#0 (copy)"
      ]
    },
    "134": {
      "op": "app_global_put",
      "stack_out": []
    },
    "135": {
      "op": "bytec_0 // \"number\"",
      "defined_out": [
        "\"number\""
      ],
      "stack_out": [
        "\"number\""
      ]
    },
    "136": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"number\"",
        "0"
      ],
      "stack_out": [
        "\"number\"",
        "0"
      ]
    },
    "137": {
      "op": "app_global_put",
      "stack_out": []
    },
    "138": {
      "retsub": true,
      "op": "retsub"
    },
    "139": {
      "subroutine": "smart_contracts/Agents.algo.ts::AgentsContract.createAgent",
      "params": {
        "agentName#0": "bytes",
        "agentIPFS#0": "bytes",
        "pricing#0": "bytes",
        "agentImage#0": "bytes"
      },
      "block": "createAgent",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "142": {
      "op": "itxn_begin"
    },
    "143": {
      "op": "pushbytes \"Royalty Points\"",
      "defined_out": [
        "\"Royalty Points\""
      ],
      "stack_out": [
        "\"Royalty Points\""
      ]
    },
    "159": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "161": {
      "op": "pushbytes \"RP\"",
      "defined_out": [
        "\"RP\""
      ],
      "stack_out": [
        "\"RP\""
      ]
    },
    "165": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "167": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "169": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "171": {
      "op": "pushint 100000000000 // 100000000000",
      "defined_out": [
        "100000000000"
      ],
      "stack_out": [
        "100000000000"
      ]
    },
    "178": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "180": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "181": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "183": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "184": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "186": {
      "op": "itxn_submit"
    },
    "187": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "itxnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "itxnResult.CreatedAssetID#0"
      ]
    },
    "189": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "itxnResult.CreatedAssetID#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "itxnResult.CreatedAssetID#0",
        "to_encode%0#0"
      ]
    },
    "191": {
      "op": "itob",
      "defined_out": [
        "itxnResult.CreatedAssetID#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "itxnResult.CreatedAssetID#0",
        "val_as_bytes%0#0"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "itxnResult.CreatedAssetID#0"
      ]
    },
    "193": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "194": {
      "op": "frame_dig -4",
      "defined_out": [
        "agentName#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "agentName#0 (copy)"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "data_length%0#0"
      ]
    },
    "197": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "data_length%0#0",
        "30"
      ]
    },
    "199": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "201": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "current_tail_offset%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "as_bytes%1#0"
      ]
    },
    "202": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "205": {
      "op": "pushbytes 0x001e",
      "defined_out": [
        "0x001e",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "0x001e"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "0x001e",
        "offset_as_uint16%1#0"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "211": {
      "op": "frame_dig -3",
      "defined_out": [
        "agentIPFS#0 (copy)",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "agentIPFS#0 (copy)"
      ]
    },
    "213": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0"
      ]
    },
    "214": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "216": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "217": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "218": {
      "op": "frame_dig -2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "pricing#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "pricing#0 (copy)"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "221": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "224": {
      "op": "uncover 2",
      "stack_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "227": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0"
      ]
    },
    "228": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "as_bytes%2#0"
      ]
    },
    "229": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ]
    },
    "232": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "233": {
      "op": "frame_dig -4",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "agentName#0 (copy)"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "236": {
      "op": "frame_dig -3",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "agentIPFS#0 (copy)"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "239": {
      "op": "frame_dig -1",
      "defined_out": [
        "agentImage#0 (copy)",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "agentImage#0 (copy)"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0"
      ]
    },
    "243": {
      "op": "bytec_0 // \"number\"",
      "defined_out": [
        "\"number\"",
        "0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0",
        "\"number\""
      ]
    },
    "244": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "245": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0"
      ]
    },
    "247": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "248": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "249": {
      "op": "pop",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "251": {
      "op": "box_put",
      "stack_out": []
    },
    "252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "253": {
      "op": "bytec_0 // \"number\"",
      "stack_out": [
        "0",
        "\"number\""
      ]
    },
    "254": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "255": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "256": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "257": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "258": {
      "op": "bytec_0 // \"number\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"number\""
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "\"number\"",
        "new_state_value%0#0"
      ]
    },
    "260": {
      "op": "app_global_put",
      "stack_out": []
    },
    "261": {
      "op": "itxn_begin"
    },
    "262": {
      "op": "intc_3 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "263": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": []
    },
    "265": {
      "op": "intc_2 // 3",
      "stack_out": [
        "3"
      ]
    },
    "266": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": []
    },
    "268": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw=="
      ],
      "stack_out": [
        "CoEBQw=="
      ]
    },
    "274": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": []
    },
    "276": {
      "op": "pushbytes base64(CiACAAEmBQxvd25lckFkZHJlc3MJdGFza0NvdW50DGZpeGVkUHJpY2luZwEAAgAzMRtBACqCBQTAS3X0BGtoAxgExUY+6gTuM5EvBPO6onA2GgCOBQBiAEwAKgAUAAIiQzEZFEQxGEQ2GgEXwByIAb0jQzEZFEQxGEQ2GgEXwBw2GgIXiAFTI0MxGRREMRhENhoBFzYaAjYaAzYaBDYaBTYaBjYaB4gAxiNDMRkURDEYRDEWIwlJOBAjEkSIAFEjQzEZFEQxGBRENhoBVwIANhoCVwIANhoDF4gAAiNDigMAKDEAZ4AEbmFtZYv9Z4AHZGV0YWlsc4v+ZyqL/2eACWNyZWF0ZWRBdDIHZykiZ4mKAQAiKmVEgcCEPQuL/zgHMgoSRIv/OAgSRCIpZURJFjIHFov/OABLAitQTwJQJwRQTFCAHgAcUGF5bWVudCBEb25lISEsIFRhc2sgQ3JlYXRlZFBLAbxIvyMIKUxniYoHACJJi/kWSb5EMgcWi/oiU0EAR4v9jACL+yJTQQAti/6MAYv8IlNBABqL/4sCSYsAUIsEUCcEUE8CUIsBUEsBvEi/iYsDVxMgQv/giwNJgRFZSwEVUowBQv/IiwOBQFMrIk8CVIwAQv+uigIAMQAiKGVEEkSxi/6yB4v/sggjshAisgGzsTIIFoAExsRQFLIagAoACHdpdGhkcmF3shqyGoAIAAZzdWNlc3OyGoGC883kArIYgQayECKyAbOJigEAMQAiKGVEEkQoi/9niQ==)",
      "defined_out": [
        "CiACAAEmBQxvd25lckFkZHJlc3MJdGFza0NvdW50DGZpeGVkUHJpY2luZwEAAgAzMRtBACqCBQTAS3X0BGtoAxgExUY+6gTuM5EvBPO6onA2GgCOBQBiAEwAKgAUAAIiQzEZFEQxGEQ2GgEXwByIAb0jQzEZFEQxGEQ2GgEXwBw2GgIXiAFTI0MxGRREMRhENhoBFzYaAjYaAzYaBDYaBTYaBjYaB4gAxiNDMRkURDEYRDEWIwlJOBAjEkSIAFEjQzEZFEQxGBRENhoBVwIANhoCVwIANhoDF4gAAiNDigMAKDEAZ4AEbmFtZYv9Z4AHZGV0YWlsc4v+ZyqL/2eACWNyZWF0ZWRBdDIHZykiZ4mKAQAiKmVEgcCEPQuL/zgHMgoSRIv/OAgSRCIpZURJFjIHFov/OABLAitQTwJQJwRQTFCAHgAcUGF5bWVudCBEb25lISEsIFRhc2sgQ3JlYXRlZFBLAbxIvyMIKUxniYoHACJJi/kWSb5EMgcWi/oiU0EAR4v9jACL+yJTQQAti/6MAYv8IlNBABqL/4sCSYsAUIsEUCcEUE8CUIsBUEsBvEi/iYsDVxMgQv/giwNJgRFZSwEVUowBQv/IiwOBQFMrIk8CVIwAQv+uigIAMQAiKGVEEkSxi/6yB4v/sggjshAisgGzsTIIFoAExsRQFLIagAoACHdpdGhkcmF3shqyGoAIAAZzdWNlc3OyGoGC883kArIYgQayECKyAbOJigEAMQAiKGVEEkQoi/9niQ=="
      ],
      "stack_out": [
        "CiACAAEmBQxvd25lckFkZHJlc3MJdGFza0NvdW50DGZpeGVkUHJpY2luZwEAAgAzMRtBACqCBQTAS3X0BGtoAxgExUY+6gTuM5EvBPO6onA2GgCOBQBiAEwAKgAUAAIiQzEZFEQxGEQ2GgEXwByIAb0jQzEZFEQxGEQ2GgEXwBw2GgIXiAFTI0MxGRREMRhENhoBFzYaAjYaAzYaBDYaBTYaBjYaB4gAxiNDMRkURDEYRDEWIwlJOBAjEkSIAFEjQzEZFEQxGBRENhoBVwIANhoCVwIANhoDF4gAAiNDigMAKDEAZ4AEbmFtZYv9Z4AHZGV0YWlsc4v+ZyqL/2eACWNyZWF0ZWRBdDIHZykiZ4mKAQAiKmVEgcCEPQuL/zgHMgoSRIv/OAgSRCIpZURJFjIHFov/OABLAitQTwJQJwRQTFCAHgAcUGF5bWVudCBEb25lISEsIFRhc2sgQ3JlYXRlZFBLAbxIvyMIKUxniYoHACJJi/kWSb5EMgcWi/oiU0EAR4v9jACL+yJTQQAti/6MAYv8IlNBABqL/4sCSYsAUIsEUCcEUE8CUIsBUEsBvEi/iYsDVxMgQv/giwNJgRFZSwEVUowBQv/IiwOBQFMrIk8CVIwAQv+uigIAMQAiKGVEEkSxi/6yB4v/sggjshAisgGzsTIIFoAExsRQFLIagAoACHdpdGhkcmF3shqyGoAIAAZzdWNlc3OyGoGC883kArIYgQayECKyAbOJigEAMQAiKGVEEkQoi/9niQ=="
      ]
    },
    "853": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": []
    },
    "855": {
      "op": "pushbytes 0xc04b75f4 // method \"createApplication(string,string,uint64)void\"",
      "defined_out": [
        "Method(createApplication(string,string,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(string,string,uint64)void)"
      ]
    },
    "861": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "863": {
      "op": "frame_dig -4",
      "stack_out": [
        "agentName#0 (copy)"
      ]
    },
    "865": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "867": {
      "op": "frame_dig -3",
      "stack_out": [
        "agentIPFS#0 (copy)"
      ]
    },
    "869": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "871": {
      "op": "frame_dig -2",
      "stack_out": [
        "pricing#0 (copy)"
      ]
    },
    "873": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "875": {
      "op": "intc_3 // 6",
      "stack_out": [
        "6"
      ]
    },
    "876": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "878": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "879": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "881": {
      "op": "itxn_submit"
    },
    "882": {
      "retsub": true,
      "op": "retsub"
    },
    "883": {
      "subroutine": "smart_contracts/Agents.algo.ts::AgentsContract.deleteAgent",
      "params": {
        "agentId#0": "uint64"
      },
      "block": "deleteAgent",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "886": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "888": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "890": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "892": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "value%0#0"
      ]
    },
    "893": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "894": {
      "error": "Only the maintainer can delete agents",
      "op": "assert // Only the maintainer can delete agents",
      "stack_out": []
    },
    "895": {
      "op": "frame_dig -1",
      "defined_out": [
        "agentId#0 (copy)"
      ],
      "stack_out": [
        "agentId#0 (copy)"
      ]
    },
    "897": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "898": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "899": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "900": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "902": {
      "error": "Agent does not exist",
      "op": "assert // Agent does not exist",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "903": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "904": {
      "op": "pop",
      "stack_out": []
    },
    "905": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "906": {
      "op": "bytec_0 // \"number\"",
      "defined_out": [
        "\"number\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"number\""
      ]
    },
    "907": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "908": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "909": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "910": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "911": {
      "op": "bytec_0 // \"number\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"number\""
      ]
    },
    "912": {
      "op": "swap",
      "stack_out": [
        "\"number\"",
        "new_state_value%0#0"
      ]
    },
    "913": {
      "op": "app_global_put",
      "stack_out": []
    },
    "914": {
      "retsub": true,
      "op": "retsub"
    }
  }
}