{
  "version": 3,
  "sources": [
    "/workspaces/puya-algo-ts-smartcontracts/smart_contracts/Agent.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAyGA;;AAAA;AAAA;AAAA;;AAAA;AAzGA;;;AAAA;AAAA;;AAyGA;;;AAAA;;AAvBE;;AAAA;AAAA;AAAA;;AAAA;AAlFF;;;AAAA;AAAA;;AAAA;;;AAAA;AAkFE;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AA3DF;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA2DE;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA/BF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+BE;;;AAAA;;AAdC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjBH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAiBG;;;AAAA;;AAAD;;;AAVA;AAagC;;AAA9B;AAlBF;;;;;;AAmBE;;AAAA;AAlBF;;;;;;;;;AAmBE;;AAAA;AAlBF;AAmBE;;AAAA;AAlBF;;;;;;;;;;;AAmBgC;;AAA9B;AAfF;AAgByB;AAAvB;;AAMF;;;AA3BA;AAAA;AAAA;AAAA;AA6BkE;;;;AAA1B;AAExB;;AAAA;;AAAoB;;AAA3B;AAAP;AACc;;AAAA;;AAAP;AAAP;AA3BF;AAAA;AAAA;AAAA;AAkCQ;AAAA;AAE+B;;AAAxB;AAEkB;;AAAA;;AALlB;;AAEF;AAFE;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJE;AAQb;;AAAA;;AAAA;AAG+B;AAAP;AA5C1B;AA4CE;AAAA;;AAMF;;;;;AASsB;;AAAA;AAAA;AAAkB;AAAA;AAKL;;AAAxB;AACY;;;AAAA;AAAd;;;;;;;AACc;;;AAAA;AAAd;;;;;;;AACgB;;;AAAA;AAAf;;;;;AALY;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAQpB;;AAAA;;AAAA;;AAHuD;;AAAA;;;;;;AADH;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;AADA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAQtD;;;AACa;;AA5Eb;AAAA;AAAA;AAAA;AA4ES;AAAP;AAEA;;;;;;;;;AAAA;;;AAIS;;;AAJT;AASY;AAG2G;;AAAzG;AAAA;;;;;;;;AAA4D;;;;;;;;;;;;;;;;AAAuE;;;;;;;;;;;;AAL1H;;;;;;;;AAEX;;;;AAAA;;;AAAA;;AAWhB;;;AACe;;AAnGb;AAAA;AAAA;AAAA;AAmGS;AAAP;AAnGF;AAoGE;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"ownerAddress\" \"taskCount\" \"fixedPricing\" 0x00 0x0033"
    },
    "48": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "50": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "53": {
      "op": "pushbytess 0xc04b75f4 0x6b680318 0xc5463eea 0xee33912f 0xf3baa270 // method \"createApplication(string,string,uint64)void\", method \"pay(pay)void\", method \"updateTask(uint64,bool,bool,bool,bool,string,address)void\", method \"withdraw(account,uint64)void\", method \"transferOwnership(account)void\"",
      "defined_out": [
        "Method(createApplication(string,string,uint64)void)",
        "Method(pay(pay)void)",
        "Method(transferOwnership(account)void)",
        "Method(updateTask(uint64,bool,bool,bool,bool,string,address)void)",
        "Method(withdraw(account,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(string,string,uint64)void)",
        "Method(pay(pay)void)",
        "Method(updateTask(uint64,bool,bool,bool,bool,string,address)void)",
        "Method(withdraw(account,uint64)void)",
        "Method(transferOwnership(account)void)"
      ]
    },
    "80": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(string,string,uint64)void)",
        "Method(pay(pay)void)",
        "Method(transferOwnership(account)void)",
        "Method(updateTask(uint64,bool,bool,bool,bool,string,address)void)",
        "Method(withdraw(account,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(string,string,uint64)void)",
        "Method(pay(pay)void)",
        "Method(updateTask(uint64,bool,bool,bool,bool,string,address)void)",
        "Method(withdraw(account,uint64)void)",
        "Method(transferOwnership(account)void)",
        "tmp%2#0"
      ]
    },
    "83": {
      "op": "match main_createApplication_route@3 main_pay_route@4 main_updateTask_route@5 main_withdraw_route@6 main_transferOwnership_route@7",
      "stack_out": []
    },
    "95": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "block": "main_transferOwnership_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "99": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "104": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "107": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "108": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "110": {
      "callsub": "smart_contracts/Agent.algo.ts::SingleAgentContract.transferOwnership",
      "op": "callsub transferOwnership",
      "stack_out": []
    },
    "113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": []
    },
    "115": {
      "block": "main_withdraw_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "117": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "118": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "121": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "122": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "125": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "126": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "131": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "132": {
      "callsub": "smart_contracts/Agent.algo.ts::SingleAgentContract.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "return",
      "stack_out": []
    },
    "137": {
      "block": "main_updateTask_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "140": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "141": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "143": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "144": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "147": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "148": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "151": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "154": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "157": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "160": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%22#0"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%22#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts/Agent.algo.ts::SingleAgentContract.updateTask",
      "op": "callsub updateTask",
      "stack_out": []
    },
    "169": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "block": "main_pay_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "173": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "174": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "178": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "1"
      ]
    },
    "181": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "182": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "183": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "185": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "187": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "188": {
      "callsub": "smart_contracts/Agent.algo.ts::SingleAgentContract.pay",
      "op": "callsub pay",
      "stack_out": []
    },
    "191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "199": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "200": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "201": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "204": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "207": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "210": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "213": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "216": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "217": {
      "callsub": "smart_contracts/Agent.algo.ts::SingleAgentContract.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "220": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "221": {
      "op": "return",
      "stack_out": []
    },
    "222": {
      "subroutine": "smart_contracts/Agent.algo.ts::SingleAgentContract.createApplication",
      "params": {
        "agentName#0": "bytes",
        "agentDetails#0": "bytes",
        "pricing#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "225": {
      "op": "bytec_0 // \"ownerAddress\"",
      "defined_out": [
        "\"ownerAddress\""
      ],
      "stack_out": [
        "\"ownerAddress\""
      ]
    },
    "226": {
      "op": "txn Sender",
      "defined_out": [
        "\"ownerAddress\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"ownerAddress\"",
        "new_state_value%0#0"
      ]
    },
    "228": {
      "op": "app_global_put",
      "stack_out": []
    },
    "229": {
      "op": "pushbytes \"name\"",
      "defined_out": [
        "\"name\""
      ],
      "stack_out": [
        "\"name\""
      ]
    },
    "235": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"name\"",
        "agentName#0 (copy)"
      ],
      "stack_out": [
        "\"name\"",
        "agentName#0 (copy)"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "238": {
      "op": "pushbytes \"details\"",
      "defined_out": [
        "\"details\""
      ],
      "stack_out": [
        "\"details\""
      ]
    },
    "247": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"details\"",
        "agentDetails#0 (copy)"
      ],
      "stack_out": [
        "\"details\"",
        "agentDetails#0 (copy)"
      ]
    },
    "249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "250": {
      "op": "bytec_2 // \"fixedPricing\"",
      "defined_out": [
        "\"fixedPricing\""
      ],
      "stack_out": [
        "\"fixedPricing\""
      ]
    },
    "251": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"fixedPricing\"",
        "pricing#0 (copy)"
      ],
      "stack_out": [
        "\"fixedPricing\"",
        "pricing#0 (copy)"
      ]
    },
    "253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "254": {
      "op": "pushbytes \"createdAt\"",
      "defined_out": [
        "\"createdAt\""
      ],
      "stack_out": [
        "\"createdAt\""
      ]
    },
    "265": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"createdAt\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"createdAt\"",
        "new_state_value%1#0"
      ]
    },
    "267": {
      "op": "app_global_put",
      "stack_out": []
    },
    "268": {
      "op": "bytec_1 // \"taskCount\"",
      "defined_out": [
        "\"taskCount\""
      ],
      "stack_out": [
        "\"taskCount\""
      ]
    },
    "269": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"taskCount\"",
        "0"
      ],
      "stack_out": [
        "\"taskCount\"",
        "0"
      ]
    },
    "270": {
      "op": "app_global_put",
      "stack_out": []
    },
    "271": {
      "retsub": true,
      "op": "retsub"
    },
    "272": {
      "subroutine": "smart_contracts/Agent.algo.ts::SingleAgentContract.pay",
      "params": {
        "payTxn#0": "uint64"
      },
      "block": "pay",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "275": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "276": {
      "op": "bytec_2 // \"fixedPricing\"",
      "defined_out": [
        "\"fixedPricing\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fixedPricing\""
      ]
    },
    "277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "278": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "279": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1000000"
      ]
    },
    "283": {
      "op": "*",
      "defined_out": [
        "expectedAmount#0"
      ],
      "stack_out": [
        "expectedAmount#0"
      ]
    },
    "284": {
      "op": "frame_dig -1",
      "defined_out": [
        "expectedAmount#0",
        "payTxn#0 (copy)"
      ],
      "stack_out": [
        "expectedAmount#0",
        "payTxn#0 (copy)"
      ]
    },
    "286": {
      "op": "gtxns Receiver",
      "defined_out": [
        "expectedAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "expectedAmount#0",
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "expectedAmount#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "expectedAmount#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "expectedAmount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "expectedAmount#0",
        "tmp%2#0"
      ]
    },
    "291": {
      "error": "payment must be to app",
      "op": "assert // payment must be to app",
      "stack_out": [
        "expectedAmount#0"
      ]
    },
    "292": {
      "op": "frame_dig -1",
      "stack_out": [
        "expectedAmount#0",
        "payTxn#0 (copy)"
      ]
    },
    "294": {
      "op": "gtxns Amount",
      "defined_out": [
        "expectedAmount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "expectedAmount#0",
        "tmp%3#0"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "297": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": []
    },
    "298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "299": {
      "op": "bytec_1 // \"taskCount\"",
      "defined_out": [
        "\"taskCount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"taskCount\""
      ]
    },
    "300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "idx#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "idx#0",
        "maybe_exists%1#0"
      ]
    },
    "301": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "idx#0"
      ]
    },
    "302": {
      "op": "dup",
      "defined_out": [
        "idx#0",
        "idx#0 (copy)"
      ],
      "stack_out": [
        "idx#0",
        "idx#0 (copy)"
      ]
    },
    "303": {
      "op": "itob",
      "defined_out": [
        "idx#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0"
      ]
    },
    "304": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "idx#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "307": {
      "op": "frame_dig -1",
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "payTxn#0 (copy)"
      ]
    },
    "309": {
      "op": "gtxns Sender",
      "defined_out": [
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%5#0"
      ]
    },
    "311": {
      "op": "dig 2",
      "defined_out": [
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%5#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "313": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%5#0",
        "val_as_bytes%0#0 (copy)",
        "0x00"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "315": {
      "op": "uncover 2",
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "317": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "318": {
      "op": "bytec 4 // 0x0033",
      "defined_out": [
        "0x0033",
        "encoded_tuple_buffer%3#0",
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "tmp%5#0",
        "encoded_tuple_buffer%3#0",
        "0x0033"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "idx#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "tmp%5#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "idx#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "323": {
      "op": "pushbytes 0x001c5061796d656e7420446f6e6521212c205461736b2043726561746564",
      "defined_out": [
        "0x001c5061796d656e7420446f6e6521212c205461736b2043726561746564",
        "encoded_tuple_buffer%5#0",
        "idx#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "0x001c5061796d656e7420446f6e6521212c205461736b2043726561746564"
      ]
    },
    "355": {
      "op": "concat",
      "defined_out": [
        "idx#0",
        "task#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "task#0"
      ]
    },
    "356": {
      "op": "dig 1",
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "task#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "358": {
      "op": "box_del",
      "defined_out": [
        "idx#0",
        "task#0",
        "val_as_bytes%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "task#0",
        "{box_del}"
      ]
    },
    "359": {
      "op": "pop",
      "stack_out": [
        "idx#0",
        "val_as_bytes%0#0",
        "task#0"
      ]
    },
    "360": {
      "op": "box_put",
      "stack_out": [
        "idx#0"
      ]
    },
    "361": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "idx#0"
      ],
      "stack_out": [
        "idx#0",
        "1"
      ]
    },
    "362": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "363": {
      "op": "bytec_1 // \"taskCount\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"taskCount\""
      ]
    },
    "364": {
      "op": "swap",
      "stack_out": [
        "\"taskCount\"",
        "new_state_value%0#0"
      ]
    },
    "365": {
      "op": "app_global_put",
      "stack_out": []
    },
    "366": {
      "retsub": true,
      "op": "retsub"
    },
    "367": {
      "subroutine": "smart_contracts/Agent.algo.ts::SingleAgentContract.updateTask",
      "params": {
        "idx#0": "uint64",
        "updateSuccess#0": "bytes",
        "updateDetails#0": "bytes",
        "updateExecutor#0": "bytes",
        "success#0": "bytes",
        "details#0": "bytes",
        "executor#0": "bytes"
      },
      "block": "updateTask",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0#2"
      ]
    },
    "371": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1"
      ]
    },
    "372": {
      "op": "frame_dig -7",
      "defined_out": [
        "idx#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "idx#0 (copy)"
      ]
    },
    "374": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0"
      ]
    },
    "375": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "376": {
      "op": "box_get",
      "defined_out": [
        "currentTask#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "maybe_exists%0#0"
      ]
    },
    "377": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0"
      ]
    },
    "378": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentTask#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "to_encode%0#0"
      ]
    },
    "380": {
      "op": "itob",
      "defined_out": [
        "currentTask#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "381": {
      "op": "frame_dig -6",
      "defined_out": [
        "currentTask#0",
        "tmp%0#0",
        "updateSuccess#0 (copy)",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "updateSuccess#0 (copy)"
      ]
    },
    "383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "updateSuccess#0 (copy)",
        "0"
      ]
    },
    "384": {
      "op": "getbit",
      "defined_out": [
        "currentTask#0",
        "tmp%0#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%2#0"
      ]
    },
    "385": {
      "op": "bz updateTask_ternary_false@2",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "388": {
      "op": "frame_dig -3",
      "defined_out": [
        "currentTask#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%0#2"
      ]
    },
    "390": {
      "op": "frame_bury 0",
      "defined_out": [
        "currentTask#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "392": {
      "block": "updateTask_ternary_merge@3",
      "stack_in": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "updateDetails#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "updateDetails#0 (copy)"
      ]
    },
    "394": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "updateDetails#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "updateDetails#0 (copy)",
        "0"
      ]
    },
    "395": {
      "op": "getbit",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%3#0"
      ]
    },
    "396": {
      "op": "bz updateTask_ternary_false@5",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "399": {
      "op": "frame_dig -2",
      "defined_out": [
        "ternary_result%1#1"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%1#1"
      ]
    },
    "401": {
      "op": "frame_bury 1",
      "defined_out": [
        "ternary_result%1#1"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "403": {
      "block": "updateTask_ternary_merge@6",
      "stack_in": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "updateExecutor#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "updateExecutor#0 (copy)"
      ]
    },
    "405": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "updateExecutor#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "updateExecutor#0 (copy)",
        "0"
      ]
    },
    "406": {
      "op": "getbit",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%4#0"
      ]
    },
    "407": {
      "op": "bz updateTask_ternary_false@8",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "410": {
      "op": "frame_dig -1",
      "defined_out": [
        "ternary_result%2#1"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1"
      ]
    },
    "412": {
      "block": "updateTask_ternary_merge@9",
      "stack_in": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0"
      ]
    },
    "414": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "415": {
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0#2",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "ternary_result%0#2"
      ]
    },
    "417": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "ternary_result%0#2",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "418": {
      "op": "frame_dig 4",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "421": {
      "op": "bytec 4 // 0x0033",
      "defined_out": [
        "0x0033",
        "encoded_tuple_buffer%3#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "encoded_tuple_buffer%3#0",
        "0x0033"
      ]
    },
    "423": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1",
        "tmp%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "424": {
      "op": "uncover 2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "ternary_result%0#2",
        "ternary_result%2#1",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "encoded_tuple_buffer%4#0",
        "ternary_result%2#1"
      ]
    },
    "426": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "ternary_result%0#2",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "427": {
      "op": "frame_dig 1",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "encoded_tuple_buffer%5#0",
        "ternary_result%1#1"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "updatedTask#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "updatedTask#0"
      ]
    },
    "430": {
      "op": "dig 1",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "updatedTask#0",
        "tmp%0#0 (copy)"
      ]
    },
    "432": {
      "op": "box_del",
      "defined_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "updatedTask#0",
        "val_as_bytes%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "updatedTask#0",
        "{box_del}"
      ]
    },
    "433": {
      "op": "pop",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "updatedTask#0"
      ]
    },
    "434": {
      "op": "box_put",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "435": {
      "retsub": true,
      "op": "retsub"
    },
    "436": {
      "block": "updateTask_ternary_false@8",
      "stack_in": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "currentTask#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0"
      ]
    },
    "438": {
      "error": "Index access is out of bounds",
      "op": "extract 19 32 // on error: Index access is out of bounds",
      "defined_out": [
        "currentTask#0",
        "ternary_result%2#1"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%2#1"
      ]
    },
    "441": {
      "op": "b updateTask_ternary_merge@9"
    },
    "444": {
      "block": "updateTask_ternary_false@5",
      "stack_in": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "currentTask#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0"
      ]
    },
    "446": {
      "op": "dup",
      "defined_out": [
        "currentTask#0",
        "currentTask#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0",
        "currentTask#0 (copy)"
      ]
    },
    "447": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "currentTask#0",
        "currentTask#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0",
        "currentTask#0 (copy)",
        "17"
      ]
    },
    "449": {
      "op": "extract_uint16",
      "defined_out": [
        "currentTask#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0",
        "item_start_offset%0#0"
      ]
    },
    "450": {
      "op": "dig 1",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0",
        "item_start_offset%0#0",
        "currentTask#0 (copy)"
      ]
    },
    "452": {
      "op": "len",
      "defined_out": [
        "currentTask#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "453": {
      "op": "substring3",
      "defined_out": [
        "currentTask#0",
        "ternary_result%1#1"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%1#1"
      ]
    },
    "454": {
      "op": "frame_bury 1",
      "defined_out": [
        "currentTask#0",
        "ternary_result%1#1"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "456": {
      "op": "b updateTask_ternary_merge@6"
    },
    "459": {
      "block": "updateTask_ternary_false@2",
      "stack_in": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "currentTask#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0"
      ]
    },
    "461": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "currentTask#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "currentTask#0",
        "64"
      ]
    },
    "463": {
      "op": "getbit",
      "defined_out": [
        "currentTask#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "is_true%0#0"
      ]
    },
    "464": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "currentTask#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "465": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "currentTask#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "466": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "468": {
      "op": "setbit",
      "defined_out": [
        "currentTask#0",
        "ternary_result%0#2"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0",
        "ternary_result%0#2"
      ]
    },
    "469": {
      "op": "frame_bury 0",
      "defined_out": [
        "currentTask#0",
        "ternary_result%0#2"
      ],
      "stack_out": [
        "ternary_result%0#2",
        "ternary_result%1#1",
        "tmp%0#0",
        "currentTask#0",
        "val_as_bytes%1#0"
      ]
    },
    "471": {
      "op": "b updateTask_ternary_merge@3"
    },
    "474": {
      "subroutine": "smart_contracts/Agent.algo.ts::SingleAgentContract.withdraw",
      "params": {
        "to#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "477": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "479": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "480": {
      "op": "bytec_0 // \"ownerAddress\"",
      "defined_out": [
        "\"ownerAddress\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"ownerAddress\""
      ]
    },
    "481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "482": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "484": {
      "error": "only owner",
      "op": "assert // only owner",
      "stack_out": []
    },
    "485": {
      "op": "itxn_begin"
    },
    "486": {
      "op": "frame_dig -2",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "488": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "490": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "492": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "494": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "495": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "497": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "498": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "500": {
      "op": "itxn_submit"
    },
    "501": {
      "op": "itxn_begin"
    },
    "502": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "505": {
      "op": "pushbytes 0xc6c45014 // method \"emit_log(string,application,string)\"",
      "defined_out": [
        "Method(emit_log(string,application,string))",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "Method(emit_log(string,application,string))"
      ]
    },
    "511": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "513": {
      "op": "pushbytes 0x00087769746864726177",
      "defined_out": [
        "0x00087769746864726177",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x00087769746864726177"
      ]
    },
    "525": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "527": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "529": {
      "op": "pushbytes 0x0006737563657373",
      "defined_out": [
        "0x0006737563657373"
      ],
      "stack_out": [
        "0x0006737563657373"
      ]
    },
    "539": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "541": {
      "op": "pushint 747862402 // 747862402",
      "defined_out": [
        "747862402"
      ],
      "stack_out": [
        "747862402"
      ]
    },
    "547": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "549": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "551": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "553": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "554": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "556": {
      "op": "itxn_submit"
    },
    "557": {
      "retsub": true,
      "op": "retsub"
    },
    "558": {
      "subroutine": "smart_contracts/Agent.algo.ts::SingleAgentContract.transferOwnership",
      "params": {
        "newOwner#0": "bytes"
      },
      "block": "transferOwnership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "561": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "563": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "564": {
      "op": "bytec_0 // \"ownerAddress\"",
      "defined_out": [
        "\"ownerAddress\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"ownerAddress\""
      ]
    },
    "565": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "566": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "567": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "568": {
      "error": "only owner",
      "op": "assert // only owner",
      "stack_out": []
    },
    "569": {
      "op": "bytec_0 // \"ownerAddress\"",
      "stack_out": [
        "\"ownerAddress\""
      ]
    },
    "570": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"ownerAddress\"",
        "newOwner#0 (copy)"
      ],
      "stack_out": [
        "\"ownerAddress\"",
        "newOwner#0 (copy)"
      ]
    },
    "572": {
      "op": "app_global_put",
      "stack_out": []
    },
    "573": {
      "retsub": true,
      "op": "retsub"
    }
  }
}